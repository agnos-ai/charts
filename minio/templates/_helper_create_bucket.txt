#!/bin/sh
set -e ; # Have script exit in the event of a failed command.

{{- if .Values.configPathmc }}
MC_CONFIG_DIR="{{ .Values.configPathmc }}"
MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"
{{- else }}
MC="/usr/bin/mc --insecure"
{{- end }}

# connectToMinio
# Use a check-sleep-check loop to wait for Minio service to be available
connectToMinio() {
  SCHEME=$1
  ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
  set -e ; # fail if we can't read the keys.
  ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;
  set +e ; # The connections to minio are allowed to fail.
  echo "Connecting to Minio server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
  MC_COMMAND="${MC} config host add myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
  $MC_COMMAND ;
  STATUS=$? ;
  until [ $STATUS = 0 ]
  do
    ATTEMPTS=`expr $ATTEMPTS + 1` ;
    echo \"Failed attempts: $ATTEMPTS\" ;
    if [ $ATTEMPTS -gt $LIMIT ]; then
      exit 1 ;
    fi ;
    sleep 2 ; # 1 second intervals between attempts
    $MC_COMMAND ;
    STATUS=$? ;
  done ;
  set -e ; # reset `e` as active
  return 0
}

# checkBucketExists ($bucket)
# Check if the bucket exists, by using the exit code of `mc ls`
checkBucketExists() {
  BUCKET=$1
  CMD=$(${MC} ls myminio/$BUCKET > /dev/null 2>&1)
  return $?
}

# createBucket ($bucket, $policy, $purge, $versioning, $versionExpiryDays)
# Ensure bucket exists, purging if asked to
createBucket() {
  BUCKET=$1
  POLICY=$2
  PURGE=$3
  VERSIONING=$4
  VERSION_EXPIRY_DAYS=$5

  echo " "
  echo "==========================================================="
  echo "====== Processing Bucket: $BUCKET ========================="
  echo "=====>"
  # Purge the bucket, if set & exists
  # Since PURGE is user input, check explicitly for `true`
  if [ $PURGE = true ]; then
    if checkBucketExists $BUCKET ; then
      echo "Purging bucket '$BUCKET'."
      set +e ; # don't exit if this fails
      echo mc rm -r --force myminio/$BUCKET
      ${MC} rm -r --force myminio/$BUCKET
      set -e ; # reset `e` as active
    else
      echo "Bucket '$BUCKET' does not exist, skipping purge."
    fi
  fi

  # Create the bucket if it does not exist
  if ! checkBucketExists $BUCKET ; then
    echo "Creating bucket '$BUCKET'"
    echo mc mb myminio/$BUCKET
    ${MC} mb myminio/$BUCKET
  else
    echo "Bucket '$BUCKET' already exists."
  fi

  # At this point, the bucket should exist, skip checking for existence
  # Set policy on the bucket
  echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
  ${MC} policy set $POLICY myminio/$BUCKET
  
  # set versioning for bucket
  if [ ! -z $VERSIONING ] ; then
    if [ $VERSIONING = true ] ; then
        echo "Enabling versioning for '$BUCKET'"
        echo mc version enable myminio/$BUCKET
        ${MC} version enable myminio/$BUCKET
    elif [ $VERSIONING = false ] ; then
        echo "Suspending versioning for '$BUCKET'"
        echo mc version suspend myminio/$BUCKET
        ${MC} version suspend myminio/$BUCKET
    fi
  else
      echo "Bucket '$BUCKET' versioning unchanged."
  fi

  # Set lifecycle of non-current versions on the bucket
  if [ ! -z $VERSION_EXPIRY_DAYS ] ; then
    echo "Resetting bucket '$BUCKET' lifecycle of non-current versions to $VERSION_EXPIRY_DAYS days."
    set +e # allow failure if no ILM rules are set up
    echo mc ilm rm --all --force myminio/$BUCKET
    ${MC} ilm rm --all --force myminio/$BUCKET
    set -e
    echo mc ilm add myminio/$BUCKET --noncurrentversion-expiration-days $VERSION_EXPIRY_DAYS
    ${MC} ilm add myminio/$BUCKET --noncurrentversion-expiration-days $VERSION_EXPIRY_DAYS
  else
    echo "Bucket '$BUCKET' lifecycle of non-current versions unchanged."
  fi
  
  # Show resulting bucket configuration
  echo "Showing bucket configuration"
  set +e # allow continue on failures
  echo mc stat myminio/$BUCKET
  ${MC} stat myminio/$BUCKET
  echo mc ilm ls myminio/$BUCKET
  ${MC} ilm ls myminio/$BUCKET
  echo mc ilm export myminio/$BUCKET
  ${MC} ilm export myminio/$BUCKET
  set -e # disallow failures
}

# Try connecting to Minio instance
{{- if .Values.tls.enabled }}
scheme=https
{{- else }}
scheme=http
{{- end }}
connectToMinio $scheme

{{- if or .Values.defaultBucket.enabled }}
# Create the bucket
createBucket {{ .Values.defaultBucket.name }} {{ .Values.defaultBucket.policy }} {{ .Values.defaultBucket.purge }} {{ .Values.defaultBucket.versioning }} {{ .Values.defaultBucket.versionExpiryDays }}
{{ else if .Values.buckets }}
# Create the buckets
{{- range .Values.buckets }}
createBucket {{ .name }} {{ .policy }} {{ .purge }} {{ .versioning }} {{ .versionExpiryDays }}
{{- end }}
{{- end }}
